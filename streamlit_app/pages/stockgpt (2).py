# -*- coding: utf-8 -*-
"""STOCKGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k47HuiMhLZdLfAgCYHYAPFG18zii2kHj
"""

pip install openai

import openai
import streamlit as st
import yfinance as yf
from statsmodels.tsa.arima.model import ARIMA

# Set OpenAI API key
openai.api_key = 'sk-proj-56dM8JBFLhWGZBnh0qU2T3BlbkFJHXPwn86JnoDS1I6AVTbG'

# Function to get stock data
def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    hist = stock.history(period="1y")
    return hist

# Function to train ARIMA model
def train_arima_model(data):
    data = data['Close']
    model = ARIMA(data, order=(5, 1, 0))
    model_fit = model.fit()
    return model_fit

# Function to predict stock prices
def predict_stock_price(model, steps=5):
    forecast = model.forecast(steps=steps)
    return forecast

# Function to query OpenAI API
def openai_query(query):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=query,
        max_tokens=150,
        n=1,
        stop=None,
        temperature=0.7
    )
    answer = response.choices[0].text.strip()
    return answer

# Streamlit App
def main():
    st.title("Stock Market AI Chatbot")

    user_input = st.text_input("Ask me anything about the stock market:", "What is the current price of AAPL?")
    if st.button("Get Answer"):
        with st.spinner("Thinking..."):
            response = openai_query(user_input)
            st.write(response)

            # Additional logic to handle specific types of queries
            if "current price" in user_input.lower():
                ticker = user_input.split()[-1].upper()
                data = get_stock_data(ticker)
                current_price = data['Close'][-1]
                st.write(f"The current price of {ticker} is ${current_price:.2f}")

            elif "predict price" in user_input.lower():
                ticker = user_input.split()[-1].upper()
                data = get_stock_data(ticker)
                model = train_arima_model(data)
                forecast = predict_stock_price(model, steps=5)
                st.write(f"Predicted prices for the next 5 days for {ticker}: {forecast.values}")

            elif "historical data" in user_input.lower():
                ticker = user_input.split()[-1].upper()
                data = get_stock_data(ticker)
                st.line_chart(data['Close'])

if __name__ == "__main__":
    main()